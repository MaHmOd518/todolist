{"version":3,"sources":["Store/actions.js","Store/actionTypes.js","Components/task.js","Store/reducer.js","Store/store.js","Components/counter.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","text","type","payload","Task","task","index","onClick","onDone","onUnDone","onUp","onDown","state","useSelector","done","disable","buttonStyle","width","height","marginBottom","statu","textDecoration","color","Card","style","flexDirection","justifyContent","alignItems","className","Title","Text","display","ButtonGroup","Button","size","variant","disabled","length","lastId","localStorage","getItem","store","createStore","action","id","filter","map","tasks","slice","task0","tasks0","subscribe","setItem","JSON","stringify","getState","Counter","allTasks","doneTasks","e","Badge","fontSize","pill","bg","App","dispatch","useDispatch","useState","value","setValue","useEffect","restate","parse","Navbar","Container","Brand","border","onChange","target","onKeyDown","key","AppWithStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf4db669.chunk.js","sourcesContent":["import * as actions from './actionTypes'\r\n\r\nexport const AddTask = (text) => ({\r\n  type: actions.ADD_TASK,\r\n  payload: { text },\r\n})\r\n\r\nexport const RemoveTask = (id) => {\r\n  return {\r\n    type: actions.REMOVE_TASK,\r\n    payload: { id },\r\n  }\r\n}\r\n\r\nexport const DoneTask = (id) => ({\r\n  type: actions.DONE_TASK,\r\n  payload: { id },\r\n})\r\n\r\nexport const UnDoneTask = (id) => ({\r\n  type: actions.UN_DONE_TASK,\r\n  payload: { id },\r\n})  \r\n\r\nexport const ReStore = (state) => ({\r\n  type: actions.RESTORE_TASKS,\r\n  payload: state,\r\n})\r\n\r\nexport const MoveUp = (id, index) => ({\r\n  type: actions.TASK_UP,\r\n  payload: { id, index },\r\n})\r\n\r\nexport const MoveDown = (id, index) => ({\r\n  type: actions.TASK_DOWN,\r\n  payload: { id, index },\r\n})\r\n","export const ADD_TASK = 'ADD'\r\nexport const REMOVE_TASK = 'REMOVE'\r\nexport const DONE_TASK = 'DONE'\r\nexport const RESTORE_TASKS = 'RESTORE'\r\nexport const UN_DONE_TASK = 'UNDONE'\r\nexport const TASK_UP = 'MOVE UP'\r\nexport const TASK_DOWN = 'MOVE DOWN'\r\n","import React from 'react'\r\nimport { Card, Button, ButtonGroup } from 'react-bootstrap'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function Task({ task, index, onClick, onDone, onUnDone, onUp, onDown }) {\r\n  const state = useSelector((state) => state)\r\n\r\n  const style = {\r\n    // width: '25rem',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'baseline',\r\n  }\r\n  const column = {\r\n    flexDirection: 'column',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  }\r\n\r\n  let done = {}\r\n  let disable = false\r\n  const buttonStyle = { width: 'fit-content', height: '2rem', marginBottom: '.5rem' }\r\n\r\n  if (task.statu === 'done') {\r\n    done = {\r\n      textDecoration: 'line-through',\r\n      color: 'gray',\r\n    }\r\n    disable = true\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card style={style} className=' mt-2 p-1'>\r\n        <Card.Title className='m-2'>Task #{index + 1}</Card.Title>\r\n        <Card.Text style={done}>\r\n          <span className='m-2'>{task.text ? task.text : 'New Task...'}</span>\r\n        </Card.Text>\r\n        <span style={column}>\r\n          <ButtonGroup>\r\n            {task.statu === 'done' ? (\r\n              <Button onClick={onUnDone} size='sm' variant='outline-dark' style={buttonStyle}>\r\n                UnDone\r\n              </Button>\r\n            ) : (\r\n              <Button disabled={disable} onClick={onDone} size='sm' variant='outline-primary' style={buttonStyle}>\r\n                Done\r\n              </Button>\r\n            )}\r\n            <Button onClick={onClick} size='sm' variant='outline-danger' style={buttonStyle}>\r\n              Remove\r\n            </Button>\r\n          </ButtonGroup>\r\n          <ButtonGroup>\r\n            <Button disabled={index === 0} onClick={onUp} size='sm' variant='outline-info' style={buttonStyle}>\r\n              ⬆\r\n            </Button>\r\n            <Button disabled={index === state.length - 1} onClick={onDown} size='sm' variant='outline-secondary' style={buttonStyle}>\r\n              ⬇\r\n            </Button>\r\n          </ButtonGroup>\r\n        </span>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n","import * as actions from './actionTypes'\r\n\r\nexport let lastId = 0\r\n\r\nlastId = localStorage.getItem('lastId')\r\n\r\n// const s = []\r\n// for (let i = 0; i < 6; i++) {\r\n//   s[i] = { id: i, text: 'number' + i, statu: 'pinding' }\r\n// }\r\n\r\nexport default function reducer(state = [], action) {\r\n  switch (action.type) {\r\n    case actions.ADD_TASK:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: lastId++,\r\n          text: action.payload.text,\r\n          statu: 'pinding',\r\n        },\r\n      ]\r\n    case actions.REMOVE_TASK:\r\n      return state.filter((task) => task.id !== action.payload.id)\r\n    case actions.DONE_TASK:\r\n      return state.map((task) => (task.id !== action.payload.id ? task : { ...task, statu: 'done' }))\r\n    case actions.UN_DONE_TASK:\r\n      return state.map((task) => (task.id !== action.payload.id ? task : { ...task, statu: 'pinding' }))\r\n    case actions.RESTORE_TASKS:\r\n      return [...action.payload]\r\n    case actions.TASK_UP:\r\n      const task = state.filter((task) => task.id === action.payload.id)\r\n      const tasks = state.filter((task) => task.id !== action.payload.id)\r\n      return [...tasks.slice(0, action.payload.index - 1), ...task, ...tasks.slice(action.payload.index - 1)]\r\n    case actions.TASK_DOWN:\r\n      const task0 = state.filter((task) => task.id === action.payload.id)\r\n      const tasks0 = state.filter((task) => task.id !== action.payload.id)\r\n      return [...tasks0.slice(0, action.payload.index + 1), ...task0, ...tasks0.slice(action.payload.index + 1)]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { createStore } from 'redux'\r\nimport reducer, { lastId } from './reducer'\r\n\r\nconst store = createStore(reducer)\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem('store', JSON.stringify(store.getState()))\r\n  localStorage.setItem('lastId', lastId)\r\n})\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction Counter() {\r\n  const state = useSelector((state) => state)\r\n  const allTasks = state.length\r\n  const doneTasks = state.filter((e) => e.statu === 'done').length\r\n\r\n  return (\r\n    <div>\r\n      <label>All Tasks:</label>\r\n      <Badge style={{ fontSize: 12 }} className='p-1 m-2' pill bg={allTasks === 0 ? 'warning' : 'primary'} text={allTasks !== 0 && 'light'}>\r\n        {allTasks?allTasks:'Zero'}\r\n      </Badge>{' '}\r\n      <label>Done Tasks:</label>\r\n      <Badge style={{ fontSize: 12 }} className='p-1 m-2' pill bg={doneTasks === 0 ? 'warning' : 'success'} text={doneTasks !== 0 && 'light'}>\r\n        {doneTasks?doneTasks:'Zero'}\r\n      </Badge>{' '}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Counter\r\n","import React, { useState, useEffect } from 'react'\nimport { Container, Card, Button, Navbar } from 'react-bootstrap'\nimport { Provider, useDispatch, useSelector } from 'react-redux'\nimport { AddTask, RemoveTask, DoneTask, UnDoneTask, ReStore, MoveDown, MoveUp } from './Store/actions'\nimport Task from './Components/task'\nimport store from './Store/store'\nimport Counter from './Components/counter'\nimport './App.css'\n\nfunction App() {\n  const tasks = useSelector((state) => state)\n  const dispatch = useDispatch()\n  const [value, setValue] = useState('')\n\n  useEffect(() => {\n    const restate = JSON.parse(localStorage.getItem('store'))\n    dispatch(ReStore(restate))\n    // console.log(restate)\n    // eslint-disable-next-line\n  }, [])\n\n  const style = {\n    // width: '25rem',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  }\n\n  function press(e) {\n    if (e.key === 'Enter') {\n      value && dispatch(AddTask(value))\n      setValue('')\n    }\n  }\n\n  return (\n    <div>\n      <Navbar variant='light' bg='light'>\n        <Container>\n          <Navbar.Brand>To Do List</Navbar.Brand>\n        </Container>\n      </Navbar>\n      <Container>\n        <Counter />\n        <Card style={style} className=' mt-2 p-1'>\n          <input\n            className='outline'\n            style={{\n              width: '100vw',\n              border: 'none',\n            }}\n            onChange={(e) => {\n              setValue(e.target.value)\n            }}\n            value={value}\n            onKeyDown={press}\n          />\n          <Button\n            size='sm'\n            variant='outline-success'\n            onClick={(e) => {\n              value && dispatch(AddTask(value))\n              setValue('')\n            }}\n            style={{\n              width: 'fit-content',\n            }}\n          >\n            Add\n          </Button>\n        </Card>\n        {tasks.map((task, key) => (\n          <Task\n            task={task}\n            key={key}\n            index={key}\n            onDone={(e) => {\n              dispatch(DoneTask(task.id))\n            }}\n            onUnDone={(e) => {\n              dispatch(UnDoneTask(task.id))\n            }}\n            onClick={(e) => {\n              dispatch(RemoveTask(task.id))\n            }}\n            onUp={(e) => {\n              dispatch(MoveUp(task.id, key))\n            }}\n            onDown={(e) => {\n              dispatch(MoveDown(task.id, key))\n            }}\n          />\n        ))}\n      </Container>\n    </div>\n  )\n}\n\nfunction AppWithStore() {\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  )\n}\n\nexport default AppWithStore\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}